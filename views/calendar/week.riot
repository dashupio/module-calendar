<calendar-week>
  <div class="calendar-day">
    <div class="calendar-table">
      <table class="table table-bordered table-striped table-fixed calendar-table-top">
        <thead>
          <tr>
            <th>
            </th>
            <th each={ (day, i) in state.days }>
              { day }
              <span class="float-right">
                { getTitle(day, i) }
              </span>
            </th>
          </tr>
        </thead>
      </table>
      <div class="calendar-table-bottom">
        <table class="table table-bordered table-striped table-fixed table-calendar">
          <tbody>
            <tr each={ (hour, i) in state.hours }>
              <th>
                { hour[1].toString() }{ hour[0] > 11 ? 'pm' : 'am' }
              </th>
              <td each={ (day, i) in state.days } class={ classes({ 'bg-active' : isToday(day), 'day-row' : true }) } data-day={ i }>

              </td>
            </tr>
          </tbody>
        </table>

        <div class="calendar-items" each={ (day, i) in state.days } data-day={ i }>
          <div is="calendar-task" class="calendar-task-wrap" each={ (item, a) in getItems(day, i) } style={ getPosition(item, i, a, day) } data-id={ item[1].get('_id') } item={ item[1] } form-fields={ props.context.fields } on-item={ (e) => props.onItem(e, item[1]) } { ...getProps() } />
        </div>
      </div>
    </div>
  </div>

  <script>
    // require base class
    import moment from 'moment';
    import PerfectScrollbar from 'perfect-scrollbar';

    // import components
    import calendarTask from './task.riot';

    // get start/end
    let end = null;
    let start = null;

    // export default
    export default class CalendarWeek {

      /**
       * local components
       */
      static get components() {
        // return components
        return {
          calendarTask,
        };
      }

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // mixin
        this.moment = moment;

        // set state elements
        this.state.days = [
          'Monday',
          'Tuesday',
          'Wednesday',
          'Thursday',
          'Friday',
          'Saturday',
          'Sunday'
        ];
        this.state.hours = [
          [0, 12],
          [1, 1],
          [2, 2],
          [3, 3],
          [4, 4],
          [5, 5],
          [6, 6],
          [7, 7],
          [8, 8],
          [9, 9],
          [10, 10],
          [11, 11],
          [12, 12],
          [13, 1],
          [14, 2],
          [15, 3],
          [16, 4],
          [17, 5],
          [18, 6],
          [19, 7],
          [20, 8],
          [21, 9],
          [22, 10],
          [23, 11],
        ];
      }

      /**
       * on mounted
       */
      onBeforeUpdate(...args) {
        // check frontend
        if (typeof window === 'undefined') return;
        
        // set day
        this.date = this.props.date || new Date();
      }

      /**
       * on mounted
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // setup ps
        this.ps = this.ps || new PerfectScrollbar(this.$('.calendar-table-bottom'));
      }

      /**
       * on updated
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // set position
        this.setPosition();
      }

      /**
       * check is today
       */
      isToday(day) {
        // check day
        return moment().format('dddd').toLowerCase() === day.toLowerCase();
      }

      /**
       * get items
       */
      getItems(day, i) {
        // date
        const date = this.props.date || new Date();

        // get items
        return this.props.getItems(
          moment(date).startOf('week').add(i + 1, 'days').toDate(),
          moment(date).startOf('week').endOf('day').add(i + 1, 'days').toDate()
        );
      }

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.ref;
        delete newProps.type;
        delete newProps.item;
        delete newProps.view;
        delete newProps.class;
        delete newProps.struct;
        delete newProps.onItem;

        // return
        return newProps;
      }

      /**
       * get text date
       */
      getTitle(day, i) {
        // date
        const date = this.props.date || new Date();

        // return moment date
        return moment(date).startOf('week').add(i, 'days').format('Do MMM');
      }

      /**
       * get item position
       */
      getPosition([range, item], i, a, day) {
        // date
        const date  = this.props.date || new Date();
        const items = this.getItems(day, i);

        // form
        const form = this.props.dashup.page(this.props.page.get('data.form'));

        // get total overlaps
        const totalOverlaps = items.reduce((accum, [sub]) => {
          // return overlaps
          if (range.overlaps(sub)) accum = accum + 1;

          // return accum
          return accum;
        }, 0);
        let a2 = 0;
        const leftOverlaps = items.reduce((accum, [sub]) => {
          // return accum
          if (a2 >= a) return accum;

          // return overlaps
          if (range.overlaps(sub)) accum = accum + 1;
          
          // a2
          a2++;

          // return accum
          return accum;
        }, 0);

        // seconds
        let endTime = moment(date).startOf('week').add(i  + 1, 'days').endOf('day').toDate().getTime();
        let startTime = moment(date).startOf('week').add(i + 1, 'days').startOf('day').toDate().getTime();
        let totalSeconds = endTime - startTime;

        // item start
        let itemEnd = range.end.toDate();
        let itemStart = range.start.toDate();

        // set start
        if (item.get('_change.start') && itemStart < startTime) {
          itemStart = startTime;
        }
        if (item.get('_change.end') && itemEnd > endTime) {
          itemEnd = endTime;
        }

        // get actual time
        const actualStart = itemStart - startTime;
        const actualEnd = itemEnd - itemStart;

        // get top
        let top = (actualStart / totalSeconds) * 100;
        let height = (actualEnd / totalSeconds) * 100;

        // get change
        if (item.get('_change.start')) {
          top = top - item.get('_change.start');
        }

        // set width
        height = (height + (item.get('_change.start') || 0)) - (item.get('_change.end') || 0);

        // left/right
        if (top < 0) top = 0;
        if (height > (100 - top)) height = (100 - top);

        // set left
        const width = 100 / totalOverlaps;
        const left = width * leftOverlaps;

        // return
        return `top: ${top.toFixed(2)}%; height: ${height.toFixed(2)}%; width: ${width}%; left:${left}%`;
      }

      /**
       * set position
       */
      setPosition() {
        this.state.days.forEach((day, i) => {
          // get day float
          const float = $(`.calendar-items[data-day="${i}"]`);
          const first = $(`.day-row[data-day="${i}"]:first`);

          // get width
          let left = $('.table-calendar tr:first > th:first').outerWidth();
          const width = first.outerWidth();

          // loop
          for (let ia = 0; ia < i; ia++) {
            // add to left
            left += $(`.day-row[data-day="${ia}"]:first`).outerWidth();
          }

          // set height
          float.css('left', left);
          float.width(width);
        });
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * classes
       */
      classes(obj) {
        // return classes
        return Object.keys(obj).filter((key) => !!obj[key]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>

  <style>
    .calendar-items {
      top      : 0;
      bottom   : 0;
      position : absolute;
    }
    .calendar-table-bottom {
      position : relative;
    }
    .card-task {
      height : 100%;
    }
    .calendar-task-wrap {
      padding  : .25rem;
      position : absolute;
    }
  </style>
</calendar-week>