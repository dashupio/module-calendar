<page-calendar-view>
  <div>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the calendar.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.form') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>form</b> for the calendar.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.start') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>start field</b> for the calendar.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.end') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>end field</b> for the calendar.
    </a>

    <div if={ props.page.get('data.start') && props.page.get('data.end') && !loading('calendar') }>
      <calendar-week if={ props.page.get('user.calendar') === 'week' } ref={ ref('calendar') } get-items={ (s, e) => getItems(s, e) } { ...props } />
      <calendar-month if={ !props.page.get('user.calendar') || props.page.get('user.calendar') === 'month' } ref={ ref('calendar') } get-items={ (s, e) => getItems(s, e) } { ...props } />
    </div>
    <div if={ props.page.get('data.start') && props.page.get('data.end') && loading('calendar') } class="text-center my-5 py-5">
      <i class="fa fa-spin fa-spinner h1" />
    </div>
  </div>

  <script>
    // require base class
    import moment from 'moment';

    // day week month
    import calendarWeek from '../../calendar/week';
    import calendarMonth from '../../calendar/month';

    // export default
    export default class PageCalendarView {

      /**
       * local components
       */
      static get components() {
        // return components
        return {
          calendarWeek,
          calendarMonth,
        };
      }

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // bind init
        this.init = this.init.bind(this);

        // check frontend
        if (typeof window === 'undefined') return;

        // safe update
        this.safeUpdate = () => {
          this.update();
        };

        // add listeners
        this.props.page.on('do.data.form', this.init);
        this.props.page.on('do.data.model', this.init);
        this.props.page.on('do.user.where', this.init);
        this.props.page.on('do.user.filter', this.init);
        this.props.page.on('do.data.filter', this.init);
        this.props.page.on('do.user.calendar', this.init);
      }

      /**
       * on before mount
       */
      onBeforeUnmount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // add listeners
        this.props.page.removeListener('do.data.form', this.init);
        this.props.page.removeListener('do.data.model', this.init);
        this.props.page.removeListener('do.user.where', this.init);
        this.props.page.removeListener('do.user.filter', this.init);
        this.props.page.removeListener('do.data.filter', this.init);
        this.props.page.removeListener('do.user.calendar', this.init);

        // remove item listeners
        if (this.state.data) {
          this.state.data.deafen();
          this.state.data.removeListener('update', this.safeUpdate);
        }
      }

      /**
       * on updated
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // set ps
        if (!this.$('.ps') && this.$('.calendar-cols')) {
          // perfect scrollbar
          this.ps = new PerfectScrollbar(this.$('.calendar-cols'));
        }

        // check search
        if (this.search !== this.props.search || this.date !== this.props.date) {
          // init
          this.date   = this.props.date;
          this.search = this.props.search;
          this.init();
        }
      }

      /**
       * on mounted
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // init
        this.init();
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // INIT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * init
       */
      async init() {
        // check
        if (this.initializing) return;
        if (!this.props.page.get('data.form')) return;
        if (!this.props.page.get('data.model')) return;

        // initializing
        this.initializing = true;

        // loading
        this.update({
          loading : new Date(),
        });

        // check data
        if (this.state.data) {
          this.state.data.deafen();
          this.state.data.removeListener('update', this.safeUpdate);
        }

        // find data
        const query = this.getQuery();

        // find
        const data = await query.listen();

        // loading
        this.update({
          data,

          loading : false,
        });

        // safe update
        data.on('update', this.safeUpdate);

        // unset
        this.initializing = false;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get query
       */
      getQuery() {
        // get form
        const form = this.props.dashup.page(this.props.page.get('data.form'));
        const calendar = this.props.page.get('user.calendar') || 'month';

        // set query
        let query = this.props.dashup.page(this.props.page.get('data.model'));

        // loop forms
        query = query.in('_meta.form', [this.props.page.get('data.form')]);

        // load filter
        let filter = null;

        // try/catch
        try {
          filter = JSON.parse(this.props.page.get('data.filter'));
        } catch (e) {}

        // add initial where
        if (filter) {
          // add wheres
          filter.forEach((where) => {
            // where
            query = query.where(where);
          });
        }

        // search
        if (this.props.search && this.props.search.length) {
          // add search
          query = query.search(this.props.search);
        }

        // test by user
        if ((this.props.page.get('user.filter') || {}).me) {
          // get user fields
          const userFields = [...(form.get('data.fields') || [])].filter((f) => (this.props.page.get('data.user') || []).includes(f.uuid));
          
          // loop fields
          query = query[userFields.length > 1 ? 'or' : 'where'](...(userFields.map((userField) => {
            // return or
            return {
              [userField.name || userField.uuid] : this.props.dashup.get('_meta.member'),
            };
          })));
        }

        // user query
        (this.props.page.get('user.where') || []).forEach((where) => {
          // types
          const numberTypes = ['gt', 'lt', 'gte', 'lte'];

          // add query
          query = query[where[0]](where[1], numberTypes.includes(where[0]) ? parseFloat(where[2]) : where[2]);
        });

        // get filter tags
        if ((this.props.page.get('user.filter.tags') || []).length) {
          // check vals
          const tagFields = [...(form.get('data.fields') || [])].filter((f) => (this.props.page.get('data.tag') || []).includes(f.uuid));

          // loop fields
          query = query[tagFields.length > 1 ? 'or' : 'where'](...(tagFields.map((tagField) => {
            // return or
            return {
              [tagField.name || tagField.uuid] : this.props.page.get('user.filter.tags')
            };
          })));
        }

        // get start/end
        const end   = (form.get('data.fields') || []).find((f) => f.uuid === this.props.page.get('data.end'));
        const start = (form.get('data.fields') || []).find((f) => f.uuid === this.props.page.get('data.start'));

        // start end date
        let endDate   = null;
        let startDate = null;

        // calendar
        if (calendar === 'month') {
          // week
          endDate = moment(this.props.date || new Date()).endOf('month').toDate();
          startDate = moment(this.props.date || new Date()).startOf('month').toDate();
        } else if (calendar === 'week') {
          // week
          endDate = moment(this.props.date || new Date()).endOf('week').toDate();
          startDate = moment(this.props.date || new Date()).startOf('week').toDate();
        } else if (calendar === 'day') {
          // units
          endDate = moment(this.props.date || new Date()).endOf('day').toDate();
          startDate = moment(this.props.date || new Date()).startOf('day').toDate();
        }

        // add where
        query = query.gte(end.name || end.uuid, startDate);
        query = query.lte(start.name || start.uuid, endDate);

        // return query
        return query;
      }

      /**
       * get items
       *
       * @param {String} col
       */
      getItems(start, end) {
        // check frontend
        if (!this.state.data) return [];
        if (typeof window === 'undefined') return [];

        // get form
        const form = this.props.dashup.page(this.props.page.get('data.form'));

        // start/end fields
        const endField = (form.get('data.fields') || []).find((f) => f.uuid === this.props.page.get('data.start'));
        const startField = (form.get('data.fields') || []).find((f) => f.uuid === this.props.page.get('data.end'));

        // check end/start
        if (!endField || !startField) return [];

        // keys
        const endKey = endField.name || endField.uuid;
        const startKey = startField.name || startField.uuid;

        // return queries
        return [...(this.state.data)].filter((row) => {
          // get values
          const rowEnd = new Date(row.get(endKey) || 0);
          const rowStart = new Date(row.get(startKey) || 0);

          // check ends within or starts within
          if (rowStart >= end && rowEnd <= start) return true;
        }).sort((a, b) => {
          // sort order
          const aC = new Date(a.get(startKey) || 0);
          const bC = new Date(b.get(startKey) || 0);

          // check order
          if (bC > aC) return -1;
          if (bC < aC) return 1;
          return 0;
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * classes
       */
      classes(obj) {
        // return classes
        return Object.keys(obj).filter((key) => !!obj[key]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-calendar-view>