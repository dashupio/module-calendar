<page-calendar-view>
  <div>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the calendar.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.form') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>form</b> for the calendar.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.start') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>start field</b> for the calendar.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.end') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>end field</b> for the calendar.
    </a>

    <div if={ props.page.get('data.start') && props.page.get('data.end') && !loading('calendar') }>
      <calendar-day if={ props.calendar === 'day' } ref={ ref('calendar') } page={ props.page } date={ props.date } get-items={ (s, e) => getItems(s, e) } on-item={ props.onItem } />
      <calendar-week if={ props.calendar === 'week' } ref={ ref('calendar') } page={ props.page } date={ props.date } get-items={ (s, e) => getItems(s, e) } on-item={ props.onItem } />
      <calendar-month if={ !props.calendar || props.calendar === 'month' } ref={ ref('calendar') } page={ props.page } date={ props.date } get-items={ (s, e) => getItems(s, e) } on-item={ props.onItem } />
    </div>
    <div if={ props.page.get('data.start') && props.page.get('data.end') && loading('calendar') } class="text-center my-5 py-5">
      <i class="fa fa-spin fa-spinner h1" />
    </div>
  </div>

  <script>
    // require base class
    import moment from 'moment';

    // day week month
    import calendarDay from '../../calendar/day';
    import calendarWeek from '../../calendar/week';
    import calendarMonth from '../../calendar/month';

    // export default
    export default class PageCalendarView {

      /**
       * local components
       */
      static get components() {
        // return components
        return {
          calendarDay,
          calendarWeek,
          calendarMonth,
        };
      }


      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // bind init
        this.init = this.init.bind(this);

        // check frontend
        if (typeof window === 'undefined') return;

        // safe update
        this.safeUpdate = () => {
          this.update();
        };

        // listeners
        this.props.page.on('data.end', this.init);
        this.props.page.on('data.form', this.init);
        this.props.page.on('data.start', this.init);
        this.props.page.on('data.model', this.init);
      }

      /**
       * on before mount
       */
      onBeforeUnmount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // listeners
        this.props.page.removeListener('data.end', this.init);
        this.props.page.removeListener('data.form', this.init);
        this.props.page.removeListener('data.model', this.init);
        this.props.page.removeListener('data.start', this.init);
      }

      /**
       * on mounted
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // init
        this.init();
      }

      /**
       * init
       */
      async init() {
        // loading
        this.loading('calendar', true);

        // check model
        if (!this.props.page.get('data.model')) {
          // unloading
          return this.loading('calendar', false);
        }

        // kill listeners
        if (this.state.ended || this.state.started) {
          // @todo kill
          this.state.ended.removeListener('update', this.safeUpdate);
          this.state.started.removeListener('update', this.safeUpdate);
        }

        // starts and ends
        const end = moment(this.props.date || new Date()).add(1, 'month').toDate();
        const start = moment(this.props.date || new Date()).startOf('day').toDate();

        // start/end fields
        const endField = this.getField(this.props.page.get('data.start'));
        const startField = this.getField(this.props.page.get('data.end'));

        // check end/start
        if (!endField || !startField) return;

        // keys
        const endKey = endField.name || endField.uuid;
        const startKey = startField.name || startField.uuid;

        // load items
        this.update({
          ended : await this.props.dashup.page(this.props.page.get('data.model')).gt(endKey, end).listen(),
          started : await this.props.dashup.page(this.props.page.get('data.model')).gt(startKey, start).listen(),
        });
      
        // listeners
        this.state.ended.on('update', this.safeUpdate);
        this.state.started.on('update', this.safeUpdate);

        // loading
        this.loading('calendar', false);
      }

      /**
       * get field
       */
      getField(uuid) {
        // return value
        return this.props.context.fields.find((field) => {
          // return fields
          return field.uuid === uuid;
        });
      }

      /**
       * get items
       *
       * @param {String} col
       */
      getItems(start, end) {
        // check frontend
        if (typeof window === 'undefined') return [];

        // start/end fields
        const endField = this.getField(this.props.page.get('data.start'));
        const startField = this.getField(this.props.page.get('data.end'));

        // check end/start
        if (!endField || !startField) return [];

        // keys
        const endKey = endField.name || endField.uuid;
        const startKey = startField.name || startField.uuid;

        // get items
        const items = [...(this.state.started || []), ...(this.state.ended || [])].reduce((accum, item) => {
          // push
          if (!accum.find((sub) => sub.get('_id') === item.get('_id'))) accum.push(item);

          // return accumulator
          return accum;
        }, []);

        // return queries
        return items.filter((row) => {
          // get values
          const rowEnd = new Date(row.get(endKey) || 0);
          const rowStart = new Date(row.get(startKey) || 0);

          // check ends within or starts within
          if (start < rowStart && end > rowStart) {
            return true;
          }
          if (end > rowEnd && start < rowEnd) {
            return true;
          }
        }).sort((a, b) => {
          // sort order
          const aC = new Date(a.get(startKey) || 0);
          const bC = new Date(b.get(startKey) || 0);

          // check order
          if (bC > aC) return -1;
          if (bC < aC) return 1;
          return 0;
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * classes
       */
      classes(obj) {
        // return classes
        return Object.keys(obj).filter((key) => !!obj[key]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-calendar-view>