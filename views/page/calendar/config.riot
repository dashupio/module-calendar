<page-calendar-config>
  <div>
    <div class="card mb-3" each={ (model, i) in props.page.get('data.models') }>
      <div class="card-header d-flex align-items-center">
        <b>
          { `Model #${i}` }
        </b>
        <button class="ml-auto btn btn-danger" onclick={ (e) => onRemove(e, i) }>
          <i class="fa fa-times" />
        </button>
      </div>
      <div class="card-body">

        <div class="mb-3">
          <div class="d-flex flex-row">
            <div class="flex-0 mr-3">
              <div class="mb-3">
                <label class="d-block form-label">
                  Color
                </label>
                <button class={ `btn-picker bg-${model.color || 'white'} dropdown-toggle` } type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                <div class="dropdown-menu p-3">
                  <button each={ (color, i) in colors } class={ `btn-picker bg-${color} mr-2` } onclick={ (e) => onColor(e, i, model, color) } />
                </div>
              </div>
            </div>
            <div class="flex-1">
              <label class="form-label">
                Calendar Model
              </label>
              <eden-select on-change={ (e, val) => onModel(i, model, val) } placeholder="Select Model" data={ getModel(model) } />
            </div>
          </div>
        </div>
        
        <div if={ !loading('model') && model.model } class="mb-3">
          <label class="form-label">
            Calendar Form
          </label>
          <eden-select on-change={ (e, val) => onForm(i, model, val) } placeholder="Select Form" data={ getForm(model) } />
        </div>

        <div if={ model.form }>
          <hr />
            
          <div class="mb-3">
            <label class="form-label">
              Date Field
            </label>
            <eden-select on-change={ (e, val) => onDate(i, model, val) } placeholder="Select Field" data={ getDate(model) } />
          </div>
            
          <div class="mb-3">
            <label class="form-label">
              Tag Field
            </label>
            <eden-select on-change={ (e, val) => onTag(i, model, val) } placeholder="Select Tag Field" data={ getTag(model) } />
            <small>
              Selecting a tag field will allow you to tag tasks.
            </small>
          </div>
            
          <div class="mb-3">
            <label class="form-label">
              User Field
            </label>
            <eden-select on-change={ (e, val) => onUser(i, model, val) } placeholder="Select User Field" data={ getUser(model) } />
            <small>
              Selecting a user field will allow you to assign tasks to that user.
            </small>
          </div>

          <div class="mb-3">
            <label class="form-label">
              Item Display
            </label>
            <code-block mode="handlebars" content={ model.display } prevent-update={ true } on-change={ (e) => onDisplay(i, model, e) } />
            <div class="alert alert-primary mt-2">
              <hbs template={ model.display || '' } data={ state.test ? state.test.get() : {} } />
            </div>
          </div>
            
          <div class="mb-3">
            <label class="form-label">
              Filter By
            </label>

            <dashup-query fields={ getFormFields(model) } on-change={ (val) => onFilter(i, model, val) } value={ model.filter ? JSON.parse(model.filter) : [] } />
          </div>
        </div>
      </div>
    </div>
    <div>
      <button class="btn btn-success" onclick={ (e) => onAdd(e) }>
        Add Model
      </button>
    </div>
  </div>

  <script>
    // export default
    export default class PageCalendarConfig {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // set colors
        this.colors = ['white', 'primary', 'secondary', 'success', 'info', 'warning', 'danger'];

        // bind methods
        this.onAdd    = this.onAdd.bind(this);
        this.onForm   = this.onForm.bind(this);
        this.onModel  = this.onModel.bind(this);
        this.loading  = this.loading.bind(this);
        this.onRemove = this.onRemove.bind(this);
      }

      /**
       * on add
       */
      async onAdd(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // add
        const models = this.props.page.get('data.models') || [];

        // bundles
        models.push({});

        // models
        await this.props.data('models', models);
      }

      /**
       * on add
       */
      async onRemove(e, i) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // add
        const models = this.props.page.get('data.models') || [];

        // remove
        models.splice(i, 1);

        // models
        await this.props.data('models', models);
      }

      /**
       * on color
       */
      async onColor(e, i, model, val) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set val
        model.color = val;

        // transparent
        if (model.color === 'transparent') model.color = null;
        
        // set model
        await this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * on model
       */
      async onModel(i, model, val) {
        // loading model
        this.loading('model', true);

        // unset form
        if (val !== model.model && model.form) {
          // unset form
          model.form = null;
        }

        // model
        model.model = val;
        
        // set model
        await this.props.data('models', this.props.page.get('data.models'));

        // loading model
        this.loading('model', false);
      }

      /**
       * on model
       */
      onForm(i, model, val) {
        // set model
        model.form = val;

        // data
        this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * on model
       */
      onDate(i, model, val) {
        // date
        model.date = val;

        // set model
        this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * on model
       */
      onTag(i, model, val) {
        // date
        model.tag = val;
      
        // set model
        this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * on model
       */
      onUser(i, model, val) {
        // user
        model.user = val;
        
        // set model
        this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * on color
       */
      onDisplay(i, model, val) {
        // model display
        model.display = val;

        // set color
        this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * on model
       */
      onFilter(val) {
        // model filter
        model.filter = JSON.stringify(val);

        // set model
        this.props.data('models', this.props.page.get('data.models'));
      }

      /**
       * get value
       */
      getModel(model) {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : model.model === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getForm(model) {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return auth pages
          return page.get('type') === 'form' && model.model === page.get('data.model');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : model.form === page.get('_id'),
          };
        });
      }

      /**
       * get field
       */
      getDate(model) {
        // return value
        return [...(this.getFormFields(model))].filter((field) => ['date'].includes(field.type)).map((field) => {
          // return value
          return {
            name     : field.label,
            value    : field.uuid,
            selected : model.date === field.uuid,
          };
        });
      }

      /**
       * get field
       */
      getTag(model) {
        // return value
        return [...(this.getFormFields(model))].filter((field) => ['select', 'checkbox'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : model.tag === field.uuid,
          };
        });
      }

      /**
       * get field
       */
      getUser(model) {
        // return value
        return [...(this.getFormFields(model))].filter((field) => ['user'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : model.user === field.uuid,
          };
        });
      }

      /**
       * get form fields
       */
      getFormFields(model) {
        // return value
        return model.form && this.props.dashup.page(model.form) ? this.props.dashup.page(model.form).get('data.fields') || [] : [];
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-calendar-config>