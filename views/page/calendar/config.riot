<dashup-config-calendar>
  <dashup-config ref={ ref('config') } page={ props.page } modules={ props.modules } connects={ props.connects }>
    <div slot="body">
      <div class="mb-3">
        <label class="form-label">
          Calendar Model
        </label>
        <eden-select on-change={ () => onModel() } ref={ ref('model') } url={ `/app/${eden.get('dashup').get('_id')}/model/list` } placeholder="Select Model" data={ getModel() } />
      </div>
      
      <div if={ !loading('model') && props.page.get('data.model.id') } class="mb-3">
        <label class="form-label">
          Calendar Form
        </label>
        <eden-select onchange={ () => onForm() } ref={ ref('form') } url={ `/app/${eden.get('dashup').get('_id')}/form/${props.page.get('data.model.id')}/list` } placeholder="Select Form" data={ getForm() } />
      </div>

      <div if={ props.page.get('data.form.id') }>
        <hr />
          
        <div class="mb-3">
          <label class="form-label">
            Start Field
          </label>
          <eden-select on-change={ () => onStart() } ref={ ref('start') } url={ `/app/${eden.get('dashup').get('_id')}/form/${props.page.get('data.form.id')}/date/fields` } placeholder="Select Field" data={ getStart() } />
        </div>
          
        <div class="mb-3">
          <label class="form-label">
            End Field
          </label>
          <eden-select on-change={ () => onEnd() } ref={ ref('end') } url={ `/app/${eden.get('dashup').get('_id')}/form/${props.page.get('data.form.id')}/date/fields` } placeholder="Select Field" data={ getEnd() } />
        </div>

        <div class="mb-3">
          <label class="form-label">
            Item Display
          </label>
          <code-block ref={ ref('display') } mode="handlebars" content={ props.page.get('data.display') || '' } prevent-update={ true } on-change={ (e) => onDisplay(e) } />
          <div class="alert alert-primary mt-2">
            <hbs template={ props.page.get('data.display') || '' } data={ state.test ? state.test.get() : {} } />
          </div>
        </div>
      </div>
    </div>
  </dashup-config>

  <script>
    // require base class
    import Base from '../../js/base';

    // export default
    export default class DashupConfigCalendar extends Base {

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // on before mount
        super.onBeforeMount(...args);
      }

      /**
       * on before mount
       */
      onMounted(...args) {
        // on before mount
        super.onMounted(...args);

        // init
        this.init();
      }

      /**
       * on model
       */
      async onModel() {
        // get value
        const model = this.refs.model.val();

        // model
        if (!model || !model.length) return;

        // get module
        const mod = this.eden.get('dashup').page(model);

        // loading model
        this.loading('model', true);

        // set again
        if (mod.get('_id') !== this.props.page.get('data.model.id')) {
          // set form again
          await this.props.onData('form', null);
        }
        
        // set model
        await this.props.onData('model', {
          id   : mod.get('_id'),
          name : mod.get('name'),
        });

        // loading model
        this.loading('model', false);
        this.init();
      }

      /**
       * on model
       */
      onForm() {
        // get value
        const form = this.refs.form.val();

        // model
        if (!form || !form.length) return;

        // set module
        const mod = this.eden.get('dashup').page(form);
        
        // set model
        this.props.onData('form', {
          id   : mod.get('_id'),
          name : mod.get('name'),
        });
      }

      /**
       * on model
       */
      async onStart() {
        // get value
        const field = this.refs.start.val();

        // model
        if (!field || !field.length) return;

        // get field
        const result = await (await fetch(`/app/${eden.get('dashup').get('_id')}/form/${this.props.page.get('data.form.id')}/fields/${field}`)).json();
        
        // set model
        this.props.onData('start', result.data);
      }

      /**
       * on model
       */
      async onEnd() {
        // get value
        const field = this.refs.end.val();

        // model
        if (!field || !field.length) return;

        // get field
        const result = await (await fetch(`/app/${eden.get('dashup').get('_id')}/form/${this.props.page.get('data.form.id')}/fields/${field}`)).json();
        
        // set model
        this.props.onData('end', result.data);
      }

      /**
       * on color
       */
      onDisplay(value) {
        // set color
        this.props.onData('display', value, true);
        this.update();
      }

      /**
       * get value
       */
      getModel() {
        // return value
        return this.props.page.get('data.model') ? [{ name : this.props.page.get('data.model.name'), value : this.props.page.get('data.model.id'), selected : true }] : [];
      }

      /**
       * get value
       */
      getForm() {
        // return value
        return this.props.page.get('data.form') ? [{ name : this.props.page.get('data.form.name'), value : this.props.page.get('data.form.id'), selected : true }] : [];
      }

      /**
       * get field
       */
      getStart() {
        // return value
        return this.props.page.get('data.start') ? [{ name : this.props.page.get('data.start.label'), value : this.props.page.get('data.start.uuid'), selected : true }] : [];
      }

      /**
       * get field
       */
      getEnd() {
        // return value
        return this.props.page.get('data.end') ? [{ name : this.props.page.get('data.end.label'), value : this.props.page.get('data.end.uuid'), selected : true }] : [];
      }

      /**
       * on settings
       *
       * @param {Event} e
       */
      show() {
        // show modal
        this.refs.config.show();

        // timeout
        setTimeout(() => {
          // refresh
          this.refs.display.editor.refresh();
        }, 200);
      }

      /**
       * on settings
       *
       * @param {Event} e
       */
      hide() {
        // show modal
        this.refs.config.hide();
      }

      /**
       *
       */
      async init () {
        // check page
        if (this.props.page.get('data.model')) {
          // update
          this.update({
            test : await this.eden.get('dashup').page(this.props.page.get('data.model.id')).sort('created_at', -1).findOne(),
          });
        }
      }
    }
  </script>
</dashup-config-calendar>